module.exports = /* eslint-disable */ [{"name":"AuthButton","description":"Material design search bar\r\n@see [Search patterns](https://material.io/guidelines/patterns/search.html)","props":{"cancelOnEscape":{"type":{"name":"bool"},"required":false,"description":"Whether to clear search on escape"},"classes":{"type":{"name":"object"},"required":true,"description":"Override or extend the styles applied to the component."},"className":{"type":{"name":"string"},"required":false,"description":"Custom top-level class","defaultValue":{"value":"''","computed":false}},"closeIcon":{"type":{"name":"node"},"required":false,"description":"Override the close icon.","defaultValue":{"value":"<ClearIcon style={{ color: grey[500] }} />","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disables text field.","defaultValue":{"value":"false","computed":false}},"onCancelSearch":{"type":{"name":"func"},"required":false,"description":"Fired when the search is cancelled."},"onChange":{"type":{"name":"func"},"required":false,"description":"Fired when the text value changes."},"onRequestSearch":{"type":{"name":"func"},"required":false,"description":"Fired when the search icon is clicked."},"placeholder":{"type":{"name":"string"},"required":false,"description":"Sets placeholder text for the embedded text field.","defaultValue":{"value":"'Search'","computed":false}},"searchIcon":{"type":{"name":"node"},"required":false,"description":"Override the search icon.","defaultValue":{"value":"<SearchIcon style={{ color: grey[500] }} />","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"Override the inline-styles of the root element.","defaultValue":{"value":"null","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":"The value of the text field.","defaultValue":{"value":"''","computed":false}}},"code":"import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Input from '@material-ui/core/Input'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\nimport classNames from 'classnames'\r\n\r\nconst styles = {\r\n  root: {\r\n    height: 48,\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  iconButton: {\r\n    opacity: 0.54,\r\n    transform: 'scale(1, 1)',\r\n    transition: 'transform 200ms cubic-bezier(0.4, 0.0, 0.2, 1)'\r\n  },\r\n  iconButtonHidden: {\r\n    transform: 'scale(0, 0)',\r\n    '& > $icon': {\r\n      opacity: 0\r\n    }\r\n  },\r\n  iconButtonDisabled: {\r\n    opacity: 0.38\r\n  },\r\n  searchIconButton: {\r\n    marginRight: -48\r\n  },\r\n  icon: {\r\n    opacity: 0.54,\r\n    transition: 'opacity 200ms cubic-bezier(0.4, 0.0, 0.2, 1)'\r\n  },\r\n  input: {\r\n    width: '100%'\r\n  },\r\n  searchContainer: {\r\n    margin: 'auto 16px',\r\n    width: '100%'\r\n  }\r\n}\r\n\r\n/**\r\n * Material design search bar\r\n * @see [Search patterns](https://material.io/guidelines/patterns/search.html)\r\n */\r\nclass AuthButton extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      focus: false,\r\n      value: this.props.value,\r\n      active: false\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    if (this.props.value !== nextProps.value) {\r\n      this.setState({...this.state, value: nextProps.value})\r\n    }\r\n  }\r\n\r\n  handleFocus = (e) => {\r\n    this.setState({focus: true})\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(e)\r\n    }\r\n  }\r\n\r\n  handleBlur = (e) => {\r\n    this.setState({focus: false})\r\n    if (this.state.value.trim().length === 0) {\r\n      this.setState({value: ''})\r\n    }\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(e)\r\n    }\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    this.setState({value: e.target.value})\r\n    if (this.props.onChange) {\r\n      this.props.onChange(e.target.value)\r\n    }\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({active: false, value: ''})\r\n    if (this.props.onCancelSearch) {\r\n      this.props.onCancelSearch()\r\n    }\r\n  }\r\n\r\n  handleKeyUp = (e) => {\r\n    if (this.props.onRequestSearch && (e.charCode === 13 || e.key === 'Enter')) {\r\n      this.props.onRequestSearch(this.state.value)\r\n    } else if (this.props.cancelOnEscape && (e.charCode === 27 || e.key === 'Escape')) {\r\n      this.handleCancel()\r\n    }\r\n    if (this.props.onKeyUp) {\r\n      this.props.onKeyUp(e)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { value } = this.state\r\n    const {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    } = this.props\r\n\r\n    return (\r\n      <Paper\r\n        className={classNames(classes.root, className)}\r\n        style={style}\r\n      >\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            onBlur={this.handleBlur}\r\n            value={value}\r\n            onChange={this.handleInput}\r\n            onKeyUp={this.handleKeyUp}\r\n            onFocus={this.handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={onRequestSearch}\r\n          classes={{\r\n            root: classNames(classes.iconButton, classes.searchIconButton, {\r\n              [classes.iconButtonHidden]: value !== ''\r\n            }),\r\n            disabled: classes.iconButtonDisabled\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon }\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={this.handleCancel}\r\n          classes={{\r\n            root: classNames(classes.iconButton, {\r\n              [classes.iconButtonHidden]: value === ''\r\n            }),\r\n            disabled: classes.iconButtonDisabled\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon }\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nAuthButton.defaultProps = {\r\n  className: '',\r\n  closeIcon: <ClearIcon style={{ color: grey[500] }} />,\r\n  disabled: false,\r\n  placeholder: 'Search',\r\n  searchIcon: <SearchIcon style={{ color: grey[500] }} />,\r\n  style: null,\r\n  value: ''\r\n}\r\n\r\nAuthButton.propTypes = {\r\n  /** Whether to clear search on escape */\r\n  cancelOnEscape: PropTypes.bool,\r\n  /** Override or extend the styles applied to the component. */\r\n  classes: PropTypes.object.isRequired,\r\n  /** Custom top-level class */\r\n  className: PropTypes.string,\r\n  /** Override the close icon. */\r\n  closeIcon: PropTypes.node,\r\n  /** Disables text field. */\r\n  disabled: PropTypes.bool,\r\n  /** Fired when the search is cancelled. */\r\n  onCancelSearch: PropTypes.func,\r\n  /** Fired when the text value changes. */\r\n  onChange: PropTypes.func,\r\n  /** Fired when the search icon is clicked. */\r\n  onRequestSearch: PropTypes.func,\r\n  /** Sets placeholder text for the embedded text field. */\r\n  placeholder: PropTypes.string,\r\n  /** Override the search icon. */\r\n  searchIcon: PropTypes.node,\r\n  /** Override the inline-styles of the root element. */\r\n  style: PropTypes.object,\r\n  /** The value of the text field. */\r\n  value: PropTypes.string\r\n}\r\n\r\nexport default withStyles(styles)(AuthButton)\r\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from \"react\";\r\nimport AuthButton from \"../../../components/AuthButton\";\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  onRequestSearchHandler(query) {\r\n    console.log('HOHO, you are searching for...', query);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AuthButton\r\n          value={this.state.value}\r\n          onChange={newValue => this.setState({ value: newValue })}\r\n          onRequestSearch={() => this.onRequestSearchHandler(this.state.value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n"}]},{"name":"SearchBar","description":"Material design search bar\r\n@see [Search patterns](https://material.io/guidelines/patterns/search.html)","props":{"cancelOnEscape":{"type":{"name":"bool"},"required":false,"description":"Whether to clear search on escape"},"classes":{"type":{"name":"object"},"required":true,"description":"Override or extend the styles applied to the component."},"className":{"type":{"name":"string"},"required":false,"description":"Custom top-level class","defaultValue":{"value":"''","computed":false}},"closeIcon":{"type":{"name":"node"},"required":false,"description":"Override the close icon.","defaultValue":{"value":"<ClearIcon style={{ color: grey[500] }} />","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Disables text field.","defaultValue":{"value":"false","computed":false}},"onCancelSearch":{"type":{"name":"func"},"required":false,"description":"Fired when the search is cancelled."},"onChange":{"type":{"name":"func"},"required":false,"description":"Fired when the text value changes."},"onRequestSearch":{"type":{"name":"func"},"required":false,"description":"Fired when the search icon is clicked."},"placeholder":{"type":{"name":"string"},"required":false,"description":"Sets placeholder text for the embedded text field.","defaultValue":{"value":"'Search'","computed":false}},"searchIcon":{"type":{"name":"node"},"required":false,"description":"Override the search icon.","defaultValue":{"value":"<SearchIcon style={{ color: grey[500] }} />","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"Override the inline-styles of the root element.","defaultValue":{"value":"null","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":"The value of the text field.","defaultValue":{"value":"''","computed":false}}},"code":"import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Input from '@material-ui/core/Input'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { grey } from '@material-ui/core/colors'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\nimport classNames from 'classnames'\r\n\r\nconst styles = {\r\n  root: {\r\n    height: 48,\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  iconButton: {\r\n    opacity: 0.54,\r\n    transform: 'scale(1, 1)',\r\n    transition: 'transform 200ms cubic-bezier(0.4, 0.0, 0.2, 1)'\r\n  },\r\n  iconButtonHidden: {\r\n    transform: 'scale(0, 0)',\r\n    '& > $icon': {\r\n      opacity: 0\r\n    }\r\n  },\r\n  iconButtonDisabled: {\r\n    opacity: 0.38\r\n  },\r\n  searchIconButton: {\r\n    marginRight: -48\r\n  },\r\n  icon: {\r\n    opacity: 0.54,\r\n    transition: 'opacity 200ms cubic-bezier(0.4, 0.0, 0.2, 1)'\r\n  },\r\n  input: {\r\n    width: '100%'\r\n  },\r\n  searchContainer: {\r\n    margin: 'auto 16px',\r\n    width: '100%'\r\n  }\r\n}\r\n\r\n/**\r\n * Material design search bar\r\n * @see [Search patterns](https://material.io/guidelines/patterns/search.html)\r\n */\r\nclass SearchBar extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      focus: false,\r\n      value: this.props.value,\r\n      active: false\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    if (this.props.value !== nextProps.value) {\r\n      this.setState({...this.state, value: nextProps.value})\r\n    }\r\n  }\r\n\r\n  handleFocus = (e) => {\r\n    this.setState({focus: true})\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(e)\r\n    }\r\n  }\r\n\r\n  handleBlur = (e) => {\r\n    this.setState({focus: false})\r\n    if (this.state.value.trim().length === 0) {\r\n      this.setState({value: ''})\r\n    }\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(e)\r\n    }\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    this.setState({value: e.target.value})\r\n    if (this.props.onChange) {\r\n      this.props.onChange(e.target.value)\r\n    }\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({active: false, value: ''})\r\n    if (this.props.onCancelSearch) {\r\n      this.props.onCancelSearch()\r\n    }\r\n  }\r\n\r\n  handleKeyUp = (e) => {\r\n    if (this.props.onRequestSearch && (e.charCode === 13 || e.key === 'Enter')) {\r\n      this.props.onRequestSearch(this.state.value)\r\n    } else if (this.props.cancelOnEscape && (e.charCode === 27 || e.key === 'Escape')) {\r\n      this.handleCancel()\r\n    }\r\n    if (this.props.onKeyUp) {\r\n      this.props.onKeyUp(e)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { value } = this.state\r\n    const {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    } = this.props\r\n\r\n    return (\r\n      <Paper\r\n        className={classNames(classes.root, className)}\r\n        style={style}\r\n      >\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            onBlur={this.handleBlur}\r\n            value={value}\r\n            onChange={this.handleInput}\r\n            onKeyUp={this.handleKeyUp}\r\n            onFocus={this.handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={onRequestSearch}\r\n          classes={{\r\n            root: classNames(classes.iconButton, classes.searchIconButton, {\r\n              [classes.iconButtonHidden]: value !== ''\r\n            }),\r\n            disabled: classes.iconButtonDisabled\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon }\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={this.handleCancel}\r\n          classes={{\r\n            root: classNames(classes.iconButton, {\r\n              [classes.iconButtonHidden]: value === ''\r\n            }),\r\n            disabled: classes.iconButtonDisabled\r\n          }}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon }\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nSearchBar.defaultProps = {\r\n  className: '',\r\n  closeIcon: <ClearIcon style={{ color: grey[500] }} />,\r\n  disabled: false,\r\n  placeholder: 'Search',\r\n  searchIcon: <SearchIcon style={{ color: grey[500] }} />,\r\n  style: null,\r\n  value: ''\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  /** Whether to clear search on escape */\r\n  cancelOnEscape: PropTypes.bool,\r\n  /** Override or extend the styles applied to the component. */\r\n  classes: PropTypes.object.isRequired,\r\n  /** Custom top-level class */\r\n  className: PropTypes.string,\r\n  /** Override the close icon. */\r\n  closeIcon: PropTypes.node,\r\n  /** Disables text field. */\r\n  disabled: PropTypes.bool,\r\n  /** Fired when the search is cancelled. */\r\n  onCancelSearch: PropTypes.func,\r\n  /** Fired when the text value changes. */\r\n  onChange: PropTypes.func,\r\n  /** Fired when the search icon is clicked. */\r\n  onRequestSearch: PropTypes.func,\r\n  /** Sets placeholder text for the embedded text field. */\r\n  placeholder: PropTypes.string,\r\n  /** Override the search icon. */\r\n  searchIcon: PropTypes.node,\r\n  /** Override the inline-styles of the root element. */\r\n  style: PropTypes.object,\r\n  /** The value of the text field. */\r\n  value: PropTypes.string\r\n}\r\n\r\nexport default withStyles(styles)(SearchBar)\r\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from \"react\";\r\nimport SearchBar from \"ps-react/SearchBar\";\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  onRequestSearchHandler(query) {\r\n    console.log('HOHO, you are searching for...', query);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchBar\r\n          value={this.state.value}\r\n          onChange={newValue => this.setState({ value: newValue })}\r\n          onRequestSearch={() => this.onRequestSearchHandler(this.state.value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n"}]}]